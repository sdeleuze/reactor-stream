/*
 * Copyright (c) 2011-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
	maven { url "http://repo.spring.io/plugins-release" }
  }
  dependencies {
	classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7',
			'io.spring.gradle:spring-io-plugin:0.0.4.RELEASE',
			'com.github.jengelman.gradle.plugins:shadow:1.2.0',
			'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.8'
  }
}

plugins {
  id 'org.asciidoctor.convert' version '1.5.2'
}

description = 'Reactive Streams implementation for Reactive Extensions and more'
group = 'io.projectreactor'

ext {
  gradleVersion = '2.8'
  gradleScriptDir = "${rootProject.projectDir}/gradle"

  // Languages
  groovyVersion = '2.4.1'

  // Logging
  slf4jVersion = '1.7.12'
  logbackVersion = '1.1.2'

  // Libraries
  jacksonDatabindVersion = '2.5.1'

  // Testing
  spockVersion = '1.0-groovy-2.4'

  javadocLinks = ["http://docs.oracle.com/javase/7/docs/api/",
				  "http://docs.oracle.com/javaee/6/api/",
				  "http://projectreactor.io/core/docs/api/",
				  "http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/"] as String[]


  bundleImportPackages = ['org.slf4j;version="[1.5.4,2)"', '*']

}

apply from: "$gradleScriptDir/setup.gradle"
apply from: "$gradleScriptDir/doc.gradle"
apply plugin: 'propdeps'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'osgi'
apply from: "${gradleScriptDir}/ide.gradle"

if (project.hasProperty('platformVersion')) {
  apply plugin: 'spring-io'

  dependencyManagement {
	springIoTestRuntime {
	  imports {
		mavenBom "io.spring.platform:platform-bom:$platformVersion"
	  }
	}
  }
}

[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:varargs",
														 "-Xlint:cast",
														 "-Xlint:classfile",
														 "-Xlint:dep-ann",
														 "-Xlint:divzero",
														 "-Xlint:empty",
														 "-Xlint:finally",
														 "-Xlint:overrides",
														 "-Xlint:path",
														 "-Xlint:processing",
														 "-Xlint:static",
														 "-Xlint:try",
														 "-Xlint:deprecation",
														 "-Xlint:unchecked",
														 "-Xlint:-serial",      // intentionally disabled
														 "-Xlint:-options",     // intentionally disabled
														 "-Xlint:-fallthrough", // intentionally disabled
														 "-Xlint:-rawtypes"     // TODO enable and fix warnings
]

compileJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}

compileTestJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}

if (JavaVersion.current().isJava8Compatible()) {
  compileTestJava.options.compilerArgs += "-parameters"
  tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
  }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


project.tasks.withType(Test).all {
  systemProperty("java.awt.headless", "true")
  systemProperty("reactor.trace.cancel", "true")
  systemProperty("reactor.trace.nocapacity", "true")
  systemProperty("testGroups", project.properties.get("testGroups"))
  scanForTestClasses = false
  include '**/*Tests.*'
  include '**/*Spec.*'
  include '**/*Test.*'
  exclude '**/*Abstract*.*'
}


configure(rootProject) {
  configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }
  repositories {
	mavenLocal()
	maven { url 'http://repo.spring.io/libs-milestone' }
	maven { url 'http://repo.spring.io/libs-snapshot' }
	maven { url "https://oss.sonatype.org/content/repositories/releases/" }
	jcenter()
	mavenCentral()

  }

  dependencies {
	compile "io.projectreactor:reactor-core:$version"


	testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
	// Testing
	testCompile "org.codehaus.groovy:groovy:$groovyVersion",
			"org.spockframework:spock-core:$spockVersion",
			"org.hamcrest:hamcrest-library:1.3",
			"org.testng:testng:6.8.5"

	testCompile "org.reactivestreams:reactive-streams-tck:1.0.0"
	testCompile "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion"
  }
}

task testNG(type: Test) {
  useTestNG()
}

sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

jar {
  manifest {
	instruction 'Import-Package', bundleImportPackages.join(',')
  }
}

